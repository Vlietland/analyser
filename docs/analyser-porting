Porting steps:
[Gemini] Prompt 1: What does this program do 'point to main entry point' (I repeatedly requested Gemini to analyse the program)
Result: a full description of the legacy program
[Gpt4o] Prompt 2: Which modern technology alternatives exist for this program?
Result: Based on the shown alternatives I decided to run it as a PWA client side in typescript
[Gpt4o] Prompt 3: Create an clean architecture technology-agnostic directory structure
Result: Created directory structure with clear split in core/renderer/ui
[Gpt4o] Prompt 4: Create all source files within the structure via touch bash command
Result: List with empty source files
[Gpt4o] Prompt 5: In which order can we best port the program
Result: <Rough plan with order core->renderer->UI>
[Gpt4o] Prompt 6: Create animplementation plan with features for the creaton of the core that can be downloaded as a textfile and read by the gemini client ai agent
Result: Detailed plan for the AI agent, including tests (copied in the dir structure)
[Gpt4o] Prompt 7: Please also create a similar plan for the renderer and the UI layer
Result: Detailed plans for the AI agent, including tests (copied in the dir structure)
[Gpt4o] Prompt 8: Please now create a overall plan to bind everything together
Result: Overall plan with links to the detailed plans, all files and 





