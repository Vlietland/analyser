The analyserWeb application is structured into several key components:

1. Model:
   - ExpressionParser: Responsible for parsing and compiling mathematical expressions.
   - GridGenerator: Generates the grid for the surface based on the parsed expression and user settings.
   - Camera: Manages the camera's state and provides it to the renderer.

2. Controller:
   - AnalyseController: Handles analysis mode interactions.
   - CameraController: Manages camera movements and updates.
   - ShiftController, ZoomController, ZFactorController: Handle respective user interactions.

3. Renderer:
   - SurfaceRenderer: Creates the mesh for the surface grid.
   - SceneBuilder: Manages the scene objects, including adding and removing the surface mesh.
   - Marker: Represents a marker object in the scene.

4. UI:
   - UI: The main user interface component, handling formula input, sample changes, tool changes, and rendering updates.
   - MouseHandler: Processes mouse events and directs them to the appropriate controller based on the selected tool.
   - Various right panel components (e.g., FormulaPane, Dashboard, AnalyseDashboard, Toolbar): Handle specific parts of the user interface.

The App class orchestrates the interactions between these components. It initializes the necessary objects, sets up event handlers, and manages the rendering loop.

Key Interactions:
- User input (formula, samples, tool selection) is handled by the UI component and propagated to the appropriate controllers or model components.
- Controllers update the model or trigger rendering updates based on user interactions.
- The renderer (SurfaceRenderer and SceneBuilder) creates and updates the graphical representation of the surface.
- The Camera and its controller manage the viewpoint and projection.

This architecture allows for a modular and maintainable implementation, separating concerns into different components.
