# Analyser Web: Guide to Adding New Features

This document provides guidelines for extending the Analyser Web application with new features while maintaining its architectural integrity.

## Architectural Overview

The Analyser Web application follows a unidirectional data flow pattern:

```
UI Events → State Management → Core Logic → Rendering
```

This architecture is divided into three main layers:

1. **UI Layer** (`src/ui/`): React components that handle user interactions
2. **Core Layer** (`src/core/`): Business logic, calculations, and data transformations
3. **Renderer Layer** (`src/renderer/`): Visualization of data using WebGL/Canvas

## Key Principles

- **Separation of Concerns**: Each layer has distinct responsibilities
- **Unidirectional Data Flow**: State changes flow downward through the component hierarchy
- **Immutable State Updates**: Create new state objects rather than mutating existing ones
- **Validation**: Validate all inputs and state changes to maintain data integrity
- **Type Safety**: Use TypeScript interfaces to ensure type consistency

## Implementation Process

When adding a new feature to the application, follow these steps:

### 1. Define Types and Interfaces

- Add any new types or interfaces to the appropriate files in `src/core/types.ts` or create domain-specific type files
- Ensure types are well-documented and properly exported

Example:
```typescript
// In src/core/types.ts
export interface NewFeatureConfig {
  enabled: boolean;
  parameter1: number;
  parameter2: string;
}
```

### 2. Implement Core Logic

- Add new core functionality in the appropriate subdirectory of `src/core/`
- Create pure functions that transform data without side effects
- Export constants for default values
- Include validation functions to ensure data integrity

Example:
```typescript
// In src/core/newFeature/featureCalculator.ts
import { NewFeatureConfig } from '../types';

export const DEFAULT_CONFIG: NewFeatureConfig = {
  enabled: true,
  parameter1: 10,
  parameter2: 'default'
};

export function validateConfig(config: NewFeatureConfig): boolean {
  // Validation logic
  return true;
}

export function processFeatureData(config: NewFeatureConfig, inputData: any): any {
  // Processing logic
  return transformedData;
}
```

### 3. Add State Management

- Add new state variables to the App component (or appropriate container)
- Create state update handlers using React's useState or useReducer
- Use the useCallback hook for handlers to prevent unnecessary re-renders
- Consider useEffect for side effects and derived state calculations

Example:
```typescript
// In App.tsx
const [featureConfig, setFeatureConfig] = useState<NewFeatureConfig>(DEFAULT_CONFIG);

const handleConfigChange = useCallback((updates: Partial<NewFeatureConfig>) => {
  setFeatureConfig(current => ({
    ...current,
    ...updates
  }));
}, []);

useEffect(() => {
  // Update dependent state when featureConfig changes
  if (featureConfig.enabled) {
    // Process data with new configuration
  }
}, [featureConfig, otherDependencies]);
```

### 4. Create UI Components

- Create new UI components in `src/ui/` or extend existing ones
- Pass state and update handlers as props
- Keep components focused on presentation and user interaction
- Use TypeScript interfaces to define component props

Example:
```typescript
// In src/ui/FeatureControls.tsx
interface FeatureControlsProps {
  currentConfig: NewFeatureConfig;
  onConfigChange: (updates: Partial<NewFeatureConfig>) => void;
}

function FeatureControls({ currentConfig, onConfigChange }: FeatureControlsProps) {
  const handleToggle = () => {
    onConfigChange({ enabled: !currentConfig.enabled });
  };
  
  return (
    <div>
      <button onClick={handleToggle}>
        {currentConfig.enabled ? 'Disable' : 'Enable'} Feature
      </button>
      {/* Additional controls */}
    </div>
  );
}
```

### 5. Connect to Renderer

- Update the renderer components to visualize the new feature's effects
- Pass the necessary state to the renderer components
- Implement rendering logic in the appropriate renderer files

Example:
```typescript
// In src/renderer/sceneBuilder.ts
export function buildScene(gridData: SurfaceGrid, viewState: ViewState, featureConfig: NewFeatureConfig) {
  // Use featureConfig to modify the scene
  return scene;
}
```

### 6. Wire Everything Together

- Update the App component to include the new UI components
- Pass the necessary state and handlers down the component tree
- Ensure all dependencies are properly connected

Example:
```tsx
// In App.tsx
return (
  <div className="app-container">
    {/* Existing components */}
    <FeatureControls 
      currentConfig={featureConfig}
      onConfigChange={handleConfigChange}
    />
    <CanvasViewport 
      gridData={gridData} 
      viewState={viewState}
      featureConfig={featureConfig}
    />
  </div>
);
```

## Best Practices

### Performance Optimization

- Use React's memoization features (memo, useMemo, useCallback)
- Debounce rapidly changing inputs (see `useDebounce` hook)
- Avoid unnecessary re-renders by carefully managing component props
- Consider lazy loading for complex features

### Error Handling

- Validate all user inputs and state changes
- Provide meaningful error messages
- Use try/catch blocks for operations that might fail
- Display errors in the UI when appropriate

### Testing

- Write unit tests for core logic functions
- Test UI components with React Testing Library
- Add integration tests for complex features
- Update existing tests when modifying shared functionality

### Documentation

- Update this guide when introducing new architectural patterns
- Document complex algorithms and business logic
- Keep component interfaces well-documented with TypeScript
- Add comments for non-obvious code

## Example: Adding a Grid Zoom Feature

To illustrate the process, here's how the grid zoom feature was implemented:

1. **Core Logic**: Functions to calculate new sample ranges while maintaining the center point
2. **State Management**: Added sampleRange state and update handler in App component
3. **UI Component**: Extended Toolbar with zoom buttons and handlers
4. **Validation**: Used validateRange to ensure valid grid boundaries
5. **Wiring**: Connected the UI events to state updates, which flow to the grid calculator and renderer

This feature demonstrates the unidirectional data flow:
- UI event (button click) → 
- State update (new sample range) → 
- Core logic (grid recalculation) → 
- Rendering (updated visualization)
