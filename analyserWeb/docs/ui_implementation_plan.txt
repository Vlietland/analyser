# Implementation Plan: analyser-web /ui

This document defines the implementation plan for the `ui/` module in the analyser-web project.
It outlines the responsibilities of each component, their interaction with core and renderer layers, and the development phases.
This document is compatible with Gemini AI agents.

---

## 🎯 Objective

To create an interactive React-based user interface for input, visualization, and manipulation of mathematical 3D surfaces.

---

## 📁 Target Files in /ui

- ui/
  ├── App.tsx
  ├── CanvasViewport.tsx
  ├── FormulaInput.tsx
  ├── SampleSelector.tsx
  ├── Toolbar.tsx
  └── Theme.tsx

---

## 🧩 Component Responsibilities

### 1. App.tsx

- Main application shell
- Manages global state: expression, sample count, grid data
- Coordinates data flow between components
- Renders CanvasViewport and input controls

### 2. CanvasViewport.tsx

- Hosts <canvas> element
- Mounts Three.js renderer from `renderer/`
- Reacts to grid updates (re-renders surface)
- Handles resize events

### 3. FormulaInput.tsx

- Controlled input field for math expression
- Validates and debounces input
- Triggers core/evaluator recompilation

### 4. SampleSelector.tsx

- UI for selecting number of samples (grid resolution)
- Can be a slider or numeric input
- Updates global sample state

### 5. Toolbar.tsx

- Control buttons: Rotate, Zoom, Shift, Zfactor
- May trigger UI overlays or direct viewState updates

### 6. Theme.tsx (Optional)

- Styling and layout utilities
- May contain global styles or theme context

---

## 🛠️ Development Phases

### Phase 1: Static Layout

- App with placeholder components
- Dummy canvas + inputs rendered

### Phase 2: Dynamic State

- Hook up state management
- Prop drilling or context for sharing expression/sample data

### Phase 3: Canvas Integration

- Load CanvasViewport with real renderer
- Wire expression changes to full re-evaluation + redraw

---

## 🔄 Data Flow

```
User Input → FormulaInput → expressionEngine → gridCalculator
           ↘ SampleSelector → sampleRange → gridCalculator
Resulting SurfaceGrid → CanvasViewport → surfaceRenderer
```

---

## 🧪 Testing

- Use React Testing Library or Vitest for interaction tests
- Focus on App, FormulaInput, and CanvasViewport

---

## 📌 Deliverables

- Fully implemented `/ui` folder with working inputs
- Canvas and controls reactively respond to state
- UI fully integrated with core and renderer